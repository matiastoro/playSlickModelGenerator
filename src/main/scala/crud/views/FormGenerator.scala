package via56.slickGenerator.crud.views

import via56.slickGenerator._
import via56.slickGenerator.Column
import via56.slickGenerator.SubClass
import via56.slickGenerator.Table

case class FormGenerator(table: Table, submodulePackageString: String) extends CodeGenerator{
  def generateInputs(columns: List[AbstractColumn], prefix: String = ""): String = {
    val groupTab = (" "*10)
    val tab = (" "*12)
    columns.map{ col => col match{
      case c: Column if !c.synthetic && c.display != DisplayType.Hidden =>
        val input = if(c.isId) /* The ID is going to be autogenerated */
          tab+"""<input type="hidden" id="id" name="id" value="@frm("id").value" />"""
        else
          tab+c.formHelper(prefix)
        groupTab+"<div class=\"form-group\">\n"+input+"\n"+groupTab+"</div>"
      case s: SubClass => generateInputs(s.cols, s.name+".")
      case o: OneToMany => o.formHelper(submodulePackageString)
      case _ => ""
    }}.mkString("\n")
  }


  def generate: String = {
    val inputs = generateInputs(table.columns)
    val args = table.foreignKeys.map{fk => ", "+fk.table+": List[models."+fk.className+"]"}.mkString("")
    val formClass = table.className+"FormData"//if(table.hasOneToMany) table.className+"FormData" else table.className
    val html = """@(frm: Form[models."""+formClass+"""]"""+args+""", """+table.objName+"""Opt: Option[models."""+table.className+"""] = None)(implicit flash: Flash, lang: Lang, session: Session, context: controllers.AuthHandler, request: Request[AnyContent])
@import myHelper._
@import helper._

        <h1>@Messages(""""+table.objName+""".form.title")</h1>


        @if(frm.hasErrors){
            <div id=""""+table.objName+"""Errors" class="row alert alert-danger">
            @frm.errors.map{ formError =>
                <ul>
                    <li><strong>@formError.key:</strong> @formError.message</li>
                </ul>
            }
            </div>
        }

"""+inputs+"""



        <div class="modalButtons">
            <a type="button" class="btn btn-default" data-dismiss="modal" href="@controllers""" + submodulePackageString + """.routes.""" + table.className + """Controller.index(1,20)">@Messages("close")</a>
            @"""+table.objName+"""Opt.map{ """+table.objName+""" =>
                @"""+table.objName+""".id.map{ id =>
                    <button type="button" id="btn-delete" class="btn btn-danger" onclick="if(confirm('@Messages("confirm.message")')) window.location='@controllers"""+submodulePackageString+""".routes."""+table.className+"""Controller.delete(id)';">
                    @Messages("delete")</button>
                }
            }
            <input type="submit" id="btn-transmitir" class="btn btn-success" value="@Messages("save")"/>
        </div>


    """

    html
  }
}
